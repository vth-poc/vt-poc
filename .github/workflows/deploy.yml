name: Fetch Issues and Deploy Dashboard

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]
  
  # Trigger on issue events (opened, edited, closed, assigned, labeled, etc.)
  issues:
    types: [opened, edited, deleted, closed, reopened, assigned, unassigned, labeled, unlabeled]
  
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read      # ‚úÖ Checkout repository
  pages: write        # ‚úÖ Deploy to GitHub Pages
  id-token: write     # ‚úÖ OIDC token for secure deployment validation
  issues: read        # ‚úÖ Fetch issues via GitHub API

# Allow only one concurrent deployment, cancel in-progress runs in favor of latest
concurrency:
  group: "pages-deployment"
  cancel-in-progress: true

jobs:
  # Fetch issues and deploy
  fetch-and-deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Create data directory
        run: mkdir -p docs/data
      
      - name: Fetch all issues from GitHub API
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Fetching issues from ${{ github.repository }}..."

          PAGE=1
          TEMP_ALL_ISSUES_FILE="temp_all_issues.json"
          TEMP_MERGED_ISSUES_FILE="temp_merged_issues.json"
          OUTPUT_FILE="docs/data/issues.json"

          # Initialize empty array
          echo "[]" > "$TEMP_ALL_ISSUES_FILE"

          while true; do
            echo "üìÑ Processing page $PAGE..."
            
            # Make API request
            if ! RESPONSE=$(gh api \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "/repos/${{ github.repository }}/issues?state=all&per_page=100&page=$PAGE&sort=created&direction=asc" 2>/dev/null); then
              echo "‚ùå Failed to fetch page $PAGE"
              break
            fi
            
            # Check if we have data
            if [ -z "$RESPONSE" ] || [ "$RESPONSE" = '[]' ]; then
              echo "‚úÖ No more issues to fetch."
              break
            fi
            
            # Merge issues
            jq -s '.[0] + .[1]' "$TEMP_ALL_ISSUES_FILE" <(echo "$RESPONSE") > "$TEMP_MERGED_ISSUES_FILE"
            mv "$TEMP_MERGED_ISSUES_FILE" "$TEMP_ALL_ISSUES_FILE"

            # Check if we're on the last page
            COUNT=$(echo "$RESPONSE" | jq length)
            if [ "$COUNT" -lt "$PER_PAGE" ]; then
              echo "‚úÖ Reached final page."
              break
            fi
            
            ((PAGE++))
            sleep 1  # Be nice to the API
          done

          # Final processing and save
          jq 'sort_by(.number)' "$TEMP_ALL_ISSUES_FILE" > "$OUTPUT_FILE"

          # Cleanup
          rm -rf "$TEMP_ALL_ISSUES_FILE" "$TEMP_MERGED_ISSUES_FILE"

          # Show summary
          echo "üéâ Successfully saved $(jq length "$OUTPUT_FILE") issues to $OUTPUT_FILE"    
      
      - name: Setup Pages
        uses: actions/configure-pages@v4
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload docs directory (includes data folder with issues.json)
          path: './docs'
      
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
