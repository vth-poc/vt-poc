name: Fetch Issues and Deploy Dashboard

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]
  
  # Trigger on issue events (opened, edited, closed, assigned, labeled, etc.)
  issues:
    types: [opened, edited, deleted, closed, reopened, assigned, unassigned, labeled, unlabeled]
  
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read      # ✅ Checkout repository
  pages: write        # ✅ Deploy to GitHub Pages
  id-token: write     # ✅ OIDC token for secure deployment validation
  issues: read        # ✅ Fetch issues via GitHub API

# Allow only one concurrent deployment, cancel in-progress runs in favor of latest
concurrency:
  group: "pages-deployment"
  cancel-in-progress: true

jobs:
  # Fetch issues and deploy
  fetch-and-deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Create data directory
        run: mkdir -p docs/data
      
      - name: Fetch all issues from GitHub API
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Fetching issues from ${{ github.repository }}..."
          
          # Fetch all issues without --paginate flag
          # This returns a single JSON array directly
          gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            '/repos/${{ github.repository }}/issues?state=all&per_page=100' \
            > docs/data/issues.json
          
          # Create timestamp file in AEST (UTC+10 for AEDT, UTC+11 for AEST)
          # Using TZ environment variable to set timezone
          echo "Fetched at $(TZ='Australia/Sydney' date '+%Y-%m-%d %H:%M:%S')" > docs/data/last-update.txt
          
          # Show summary
          ISSUE_COUNT=$(jq 'length' docs/data/issues.json || echo "0")
          echo "✅ Fetched $ISSUE_COUNT issues successfully"
          
          # Debug: Show first issue title
          jq -r 'if type == "array" then (.[0].title // "No work items found") else "ERROR: Not an array" end' docs/data/issues.json
      
      - name: Setup Pages
        uses: actions/configure-pages@v4
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload docs directory (includes data folder with issues.json)
          path: './docs'
      
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
